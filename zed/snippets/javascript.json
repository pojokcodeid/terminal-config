{
    // react es7
    "exportType": {
        "body": ["export type $2 = {${2:second}}"],
        "prefix": "exptp"
    },
    "exportInterface": {
        "prefix": "expint",
        "body": ["export interface $2 {${2:second}}"]
    },
    "typescriptReactClassComponent": {
        "prefix": "tsrcc",
        "description": "Creates a React component class with ES7 module system and TypeScript interfaces",
        "body": [
            "import React, { Component } from 'react'",
            "",
            "type Props = {}",
            "",
            "type State = {}",
            "",
            "export default class ${1:ComponentName} extends Component<Props, State> {",
            "  state = {}",
            "",
            "  render() {",
            "    return (",
            "      <div>$2</div>",
            "    )",
            "  }",
            "}"
        ]
    },
    "typescriptReactClassExportComponent": {
        "prefix": "tsrce",
        "body": [
            "import React, { Component } from 'react'",
            "",
            "type Props = {}",
            "",
            "type State = {}",
            "",
            "class ${1:ComponentName} extends Component<Props, State> {",
            "  state = {}",
            "",
            "  render() {",
            "    return (",
            "      <div>$2</div>",
            "    )",
            "  }",
            "}",
            "",
            "export default ${1:ComponentName}"
        ],
        "description": "Creates a React component class with ES7 module system and TypeScript interfaces"
    },
    "typescriptReactFunctionalExportComponent": {
        "prefix": "tsrfce",
        "body": [
            "import React from 'react'",
            "",
            "type Props = {}",
            "",
            "function ${1:ComponentName}({}: Props) {",
            "  return (",
            "    <div>$2</div>",
            "  )",
            "}",
            "",
            "export default ${1:ComponentName}"
        ],
        "description": [
            "import React from 'react'",
            "",
            "type Props = {}",
            "",
            "function ${1:ComponentName}({}: Props) {",
            "  return (",
            "    <div>$2</div>",
            "  )",
            "}",
            "",
            "export default ${1:ComponentName}"
        ]
    },
    "typescriptReactFunctionalComponent": {
        "prefix": "tsrfc",
        "body": [
            "import React from 'react'",
            "",
            "type Props = {}",
            "",
            "export default function ${1:ComponentName}({}: Props) {",
            "  return (",
            "    <div>$2</div>",
            "  )",
            "}"
        ],
        "description": [
            "import React from 'react'",
            "",
            "type Props = {}",
            "",
            "export default function ${1:ComponentName}({}: Props) {",
            "  return (",
            "    <div>$2</div>",
            "  )",
            "}"
        ]
    },
    "typescriptReactArrowFunctionExportComponent": {
        "prefix": "tsrafce",
        "body": [
            "import React from 'react'",
            "",
            "type Props = {}",
            "",
            "const ${1:ComponentName} = (props: Props) => {",
            "  return (",
            "    <div>$2</div>",
            "  )",
            "}",
            "",
            "export default ${1:ComponentName}"
        ],
        "description": [
            "import React from 'react'",
            "",
            "type Props = {}",
            "",
            "const ${1:ComponentName} = (props: Props) => {",
            "  return (",
            "    <div>$2</div>",
            "  )",
            "}",
            "",
            "export default ${1:ComponentName}"
        ]
    },
    "typescriptReactArrowFunctionComponent": {
        "prefix": "tsrafc",
        "body": [
            "import React from 'react'",
            "",
            "type Props = {}",
            "",
            "const ${1:ComponentName} = (props: Props) => {",
            "  return (",
            "    <div>",
            "      $2",
            "    </div>",
            "  )",
            "}"
        ],
        "description": [
            "import React from 'react'",
            "",
            "type Props = {}",
            "",
            "const ${1:ComponentName} = (props: Props) => {",
            "  return (",
            "    <div>",
            "      $2",
            "    </div>",
            "  )",
            "}"
        ]
    },
    "typescriptReactClassPureComponent": {
        "prefix": "tsrpc",
        "body": [
            "import React, { PureComponent } from 'react'",
            "",
            "type Props = {}",
            "",
            "export default class ${1:ComponentName} extends PureComponent<Props> {",
            "  render() {",
            "    return (",
            "      <div>$2</div>",
            "    )",
            "  }",
            "}"
        ],
        "description": "Creates a React pure component class with ES7 module system and TypeScript interface"
    },
    "typescriptReactClassExportPureComponent": {
        "prefix": "tsrpce",
        "body": [
            "import React, { PureComponent } from 'react'",
            "",
            "type Props = {}",
            "",
            "class ${1:ComponentName} extends PureComponent<Props> {",
            "  render() {",
            "    return (",
            "      <div>$2</div>",
            "    )",
            "  }",
            "}",
            "",
            "export default ${1:ComponentName}"
        ],
        "description": "Creates a React pure component class with ES7 module system and TypeScript interface"
    },
    "typescriptReactClassComponentRedux": {
        "prefix": "tsrcredux",
        "body": [
            "import { connect } from 'react-redux'",
            "import React, { Component } from 'react'",
            "",
            "type Props = {}",
            "",
            "type State = {}",
            "",
            "export class ${1:ComponentName} extends Component<Props, State> {",
            "  state = {}",
            "",
            "  render() {",
            "    return (",
            "      <div>$2</div>",
            "    )",
            "  }",
            "}",
            "",
            "const mapStateToProps = (state) => ({})",
            "",
            "const mapDispatchToProps = {}",
            "",
            "export default connect(mapStateToProps, mapDispatchToProps)(${1:ComponentName})"
        ],
        "description": "Creates a React component class with connected redux and ES7 module system and TypeScript interfaces"
    },
    "typescriptReactNativeArrowFunctionComponent": {
        "prefix": "tsrnf",
        "body": [
            "import { View, Text } from 'react-native'",
            "import React from 'react'",
            "",
            "type Props = {}",
            "",
            "const ${1:ComponentName} = (props: Props) => {",
            "  return (",
            "    <View>",
            "      <Text>$2</Text>",
            "    </View>",
            "  )",
            "}",
            "",
            "export default ${1:ComponentName}"
        ],
        "description": "Creates a React Native Arrow Function Component with ES7 module system in TypeScript"
    },
    "typescriptReactNativeArrowFunctionComponentWithStyles": {
        "prefix": "tsrnfs",
        "body": [
            "import { StyleSheet, Text, View } from 'react-native'",
            "import React from 'react'",
            "",
            "type Props = {}",
            "",
            "const ${1:ComponentName} = (props: Props) => {",
            "  return (",
            "    <View>",
            "      <Text>$2</Text>",
            "    </View>",
            "  )",
            "}",
            "",
            "export default ${1:ComponentName}",
            "",
            "const styles = StyleSheet.create({})"
        ],
        "description": "Creates a React Native Arrow Function Component with ES7 module system, TypeScript interface and StyleSheet"
    },
    "reactArrowFunctionComponent": {
        "prefix": "rafc",
        "body": [
            "import React from 'react'",
            "",
            "export const ${1:ComponentName} = () => {",
            "  return (",
            "    <div>",
            "      $2",
            "    </div>",
            "  )",
            "}",
            ""
        ],
        "description": [
            "import React from 'react'",
            "",
            "export const ${1:ComponentName} = () => {",
            "  return (",
            "    <div>",
            "      $2",
            "    </div>",
            "  )",
            "}",
            ""
        ]
    },
    "reactArrowFunctionComponentWithPropTypes": {
        "prefix": "rafcp",
        "body": [
            "import React from 'react'",
            "import PropTypes from 'prop-types'",
            "",
            "const ${1:ComponentName} = props => {",
            "  return (",
            "    <div>",
            "      $2",
            "    </div>",
            "  )",
            "}",
            "",
            "${1:ComponentName}.propTypes = {}",
            "",
            "export default ${1:ComponentName}"
        ],
        "description": [
            "import React from 'react'",
            "import PropTypes from 'prop-types'",
            "",
            "const ${1:ComponentName} = props => {",
            "  return (",
            "    <div>",
            "      $2",
            "    </div>",
            "  )",
            "}",
            "",
            "${1:ComponentName}.propTypes = {}",
            "",
            "export default ${1:ComponentName}"
        ]
    },
    "reactArrowFunctionExportComponent": {
        "prefix": "rafce",
        "body": [
            "import React from 'react'",
            "",
            "const ${1:ComponentName} = () => {",
            "  return (",
            "    <div>",
            "      $2",
            "    </div>",
            "  )",
            "}",
            "",
            "export default ${1:ComponentName}"
        ],
        "description": [
            "import React from 'react'",
            "",
            "const ${1:ComponentName} = () => {",
            "  return (",
            "    <div>",
            "      $2",
            "    </div>",
            "  )",
            "}",
            "",
            "export default ${1:ComponentName}"
        ]
    },
    "reactClassComponent": {
        "prefix": "rcc",
        "body": [
            "import React, { Component } from 'react'",
            "",
            "export default class ${1:ComponentName} extends Component {",
            "  render() {",
            "    return (",
            "      <div>$2</div>",
            "    )",
            "  }",
            "}",
            ""
        ],
        "description": "Creates a React component class with ES7 module system"
    },
    "reactClassComponentPropTypes": {
        "prefix": "rccp",
        "body": [
            "import PropTypes from 'prop-types'",
            "import React, { Component } from 'react'",
            "",
            "export default class ${1:ComponentName} extends Component {",
            "  static propTypes = {${2:second}: ${3:third}}",
            "",
            "  render() {",
            "    return (",
            "      <div>$2</div>",
            "    )",
            "  }",
            "}",
            ""
        ],
        "description": "Creates a React component class with PropTypes and ES7 module system"
    },
    "reactClassComponentRedux": {
        "prefix": "rcredux",
        "body": [
            "import React, { Component } from 'react'",
            "import { connect } from 'react-redux'",
            "",
            "export class ${1:ComponentName} extends Component {",
            "  render() {",
            "    return (",
            "      <div>$2</div>",
            "    )",
            "  }",
            "}",
            "",
            "const mapStateToProps = (state) => ({})",
            "",
            "const mapDispatchToProps = {}",
            "",
            "export default connect(mapStateToProps, mapDispatchToProps)(${1:ComponentName})"
        ],
        "description": "Creates a React component class with connected redux and ES7 module system"
    },
    "reactClassComponentReduxPropTypes": {
        "prefix": "rcreduxp",
        "body": [
            "import PropTypes from 'prop-types'",
            "import React, { Component } from 'react'",
            "import { connect } from 'react-redux'",
            "",
            "export class ${1:ComponentName} extends Component {",
            "  static propTypes = {",
            "    ${2:second}: ${3:third}",
            "  }",
            "",
            "  render() {",
            "    return (",
            "      <div>$2</div>",
            "    )",
            "  }",
            "}",
            "",
            "const mapStateToProps = (state) => ({})",
            "",
            "const mapDispatchToProps = {}",
            "",
            "export default connect(mapStateToProps, mapDispatchToProps)(${1:ComponentName})"
        ],
        "description": "Creates a React component class with PropTypes with connected redux and ES7 module system"
    },
    "reactClassExportComponent": {
        "prefix": "rce",
        "body": [
            "import React, { Component } from 'react'",
            "",
            "export class ${1:ComponentName} extends Component {",
            "  render() {",
            "    return (",
            "      <div>$2</div>",
            "    )",
            "  }",
            "}",
            "",
            "export default ${1:ComponentName}"
        ],
        "description": "Creates a React component class with ES7 module system"
    },
    "reactClassExportComponentWithPropTypes": {
        "prefix": "rcep",
        "body": [
            "import PropTypes from 'prop-types'",
            "import React, { Component } from 'react'",
            "",
            "export class ${1:ComponentName} extends Component {",
            "  static propTypes = {}",
            "",
            "  render() {",
            "    return (",
            "      <div>$2</div>",
            "    )",
            "  }",
            "}",
            "",
            "export default ${1:ComponentName}"
        ],
        "description": "Creates a React component class with ES7 module system"
    },
    "reactClassExportPureComponent": {
        "prefix": "rpce",
        "body": [
            "import React, { PureComponent } from 'react'",
            "",
            "export class ${1:ComponentName} extends PureComponent {",
            "  render() {",
            "    return (",
            "      <div>$2</div>",
            "    )",
            "  }",
            "}",
            "",
            "export default ${1:ComponentName}"
        ],
        "description": "Creates a React pure component class with ES7 module system export"
    },
    "reactClassPureComponent": {
        "prefix": "rpc",
        "body": [
            "import React, { PureComponent } from 'react'",
            "",
            "export default class ${1:ComponentName} extends PureComponent {",
            "  render() {",
            "    return (",
            "      <div>$2</div>",
            "    )",
            "  }",
            "}",
            ""
        ],
        "description": "Creates a React pure component class with ES7 module system"
    },
    "reactClassPureComponentWithPropTypes": {
        "prefix": "rpcp",
        "body": [
            "import PropTypes from 'prop-types'",
            "import React, { PureComponent } from 'react'",
            "",
            "export default class ${1:ComponentName} extends PureComponent {",
            "  static propTypes = {}",
            "",
            "  render() {",
            "    return (",
            "      <div>$2</div>",
            "    )",
            "  }",
            "}",
            ""
        ],
        "description": "Creates a React component class with ES7 module system"
    },
    "reactFunctionMemoComponent": {
        "prefix": "rmc",
        "body": [
            "import React, { memo } from 'react'",
            "",
            "const ${1:ComponentName} = memo(() => {",
            "  return (",
            "    <div>$2</div>",
            "  )",
            "})",
            "",
            "export default ${1:ComponentName}"
        ],
        "description": "Creates a React Memo Function Component with ES7 module system"
    },
    "reactFunctionMemoComponentWithPropTypes": {
        "prefix": "rmcp",
        "body": [
            "import PropTypes from 'prop-types'",
            "import React, { memo } from 'react'",
            "",
            "const ${1:ComponentName} = memo((props) => {",
            "  return (",
            "    <div>$2</div>",
            "  )",
            "})",
            "",
            "${1:ComponentName}.propTypes = {}",
            "",
            "export default ${1:ComponentName}"
        ],
        "description": "Creates a React Memo Function Component with ES7 module system with PropTypes"
    },
    "reactFunctionalComponent": {
        "prefix": "rfc",
        "body": [
            "import React from 'react'",
            "",
            "export default function ${1:ComponentName}() {",
            "  return (",
            "    <div>$2</div>",
            "  )",
            "}",
            ""
        ],
        "description": [
            "import React from 'react'",
            "",
            "export default function ${1:ComponentName}() {",
            "  return (",
            "    <div>$2</div>",
            "  )",
            "}",
            ""
        ]
    },
    "reactFunctionalComponentRedux": {
        "prefix": "rfcredux",
        "body": [
            "import React from 'react'",
            "import { connect } from 'react-redux'",
            "",
            "export const ${1:ComponentName} = (props) => {",
            "  return (",
            "    <div>$2</div>",
            "  )",
            "}",
            "",
            "const mapStateToProps = (state) => ({})",
            "",
            "const mapDispatchToProps = {}",
            "",
            "export default connect(mapStateToProps, mapDispatchToProps)(${1:ComponentName})"
        ],
        "description": [
            "import React from 'react'",
            "import { connect } from 'react-redux'",
            "",
            "export const ${1:ComponentName} = (props) => {",
            "  return (",
            "    <div>$2</div>",
            "  )",
            "}",
            "",
            "const mapStateToProps = (state) => ({})",
            "",
            "const mapDispatchToProps = {}",
            "",
            "export default connect(mapStateToProps, mapDispatchToProps)(${1:ComponentName})"
        ]
    },
    "reactFunctionalComponentReduxPropTypes": {
        "prefix": "rfcreduxp",
        "body": [
            "import PropTypes from 'prop-types'",
            "import React from 'react'",
            "import { connect } from 'react-redux'",
            "",
            "export const ${1:ComponentName} = (props) => {",
            "  return (",
            "    <div>$2</div>",
            "  )",
            "}",
            "",
            "${1:ComponentName}.propTypes = {",
            "  ${2:second}: PropTypes.${3:third}",
            "}",
            "",
            "const mapStateToProps = (state) => ({})",
            "",
            "const mapDispatchToProps = {}",
            "",
            "export default connect(mapStateToProps, mapDispatchToProps)(${1:ComponentName})"
        ],
        "description": [
            "import PropTypes from 'prop-types'",
            "import React from 'react'",
            "import { connect } from 'react-redux'",
            "",
            "export const ${1:ComponentName} = (props) => {",
            "  return (",
            "    <div>$2</div>",
            "  )",
            "}",
            "",
            "${1:ComponentName}.propTypes = {",
            "  ${2:second}: PropTypes.${3:third}",
            "}",
            "",
            "const mapStateToProps = (state) => ({})",
            "",
            "const mapDispatchToProps = {}",
            "",
            "export default connect(mapStateToProps, mapDispatchToProps)(${1:ComponentName})"
        ]
    },
    "reactFunctionalComponentWithPropTypes": {
        "prefix": "rfcp",
        "body": [
            "import React from 'react'",
            "import PropTypes from 'prop-types'",
            "",
            "function ${1:ComponentName}(props) {",
            "  return (",
            "    <div>$2</div>",
            "  )",
            "}",
            "",
            "${1:ComponentName}.propTypes = {}",
            "",
            "export default ${1:ComponentName}",
            ""
        ],
        "description": [
            "import React from 'react'",
            "import PropTypes from 'prop-types'",
            "",
            "function ${1:ComponentName}(props) {",
            "  return (",
            "    <div>$2</div>",
            "  )",
            "}",
            "",
            "${1:ComponentName}.propTypes = {}",
            "",
            "export default ${1:ComponentName}",
            ""
        ]
    },
    "reactFunctionalExportComponent": {
        "prefix": "rfce",
        "body": [
            "import React from 'react'",
            "",
            "function ${1:ComponentName}() {",
            "  return (",
            "    <div>$2</div>",
            "  )",
            "}",
            "",
            "export default ${1:ComponentName}"
        ],
        "description": [
            "import React from 'react'",
            "",
            "function ${1:ComponentName}() {",
            "  return (",
            "    <div>$2</div>",
            "  )",
            "}",
            "",
            "export default ${1:ComponentName}"
        ]
    },
    "consoleAssert": {
        "prefix": "cas",
        "body": ["console.assert($2, ${2:second})"],
        "description": "If the specified expression is false, the message is written to the console along with a stack trace"
    },
    "consoleClear": {
        "prefix": "ccl",
        "body": ["console.clear()"],
        "description": "Clears the console"
    },
    "consoleCount": {
        "prefix": "cco",
        "body": ["console.count($2)"],
        "description": "Writes the the number of times that count() has been invoked at the same line and with the same label"
    },
    "consoleDir": {
        "prefix": "cdi",
        "body": ["console.dir($2)"],
        "description": "Prints a JavaScript representation of the specified object"
    },
    "consoleError": {
        "prefix": "cer",
        "body": ["console.error($2)"],
        "description": "Displays a message in the console and also includes a stack trace from where the method was called"
    },
    "consoleGroup": {
        "prefix": "cgr",
        "body": ["console.group('$2')"],
        "description": "Groups and indents all following output by an additional level, until console.groupEnd() is called."
    },
    "consoleGroupEnd": {
        "prefix": "cge",
        "body": ["console.groupEnd()"],
        "description": "Closes out the corresponding console.group()."
    },
    "consoleLog": {
        "prefix": "clg",
        "body": ["console.log($2)"],
        "description": "Displays a message in the console"
    },
    "consoleTrace": {
        "prefix": "ctr",
        "body": ["console.trace($2)"],
        "description": "Prints a stack trace from the point where the method was called"
    },
    "consoleLogObject": {
        "prefix": "clo",
        "body": ["console.log('$2', $2)"],
        "description": "Logs property with name."
    },
    "consoleLogJson": {
        "prefix": "clj",
        "body": ["console.log('$2', JSON.stringify($2, null, 2))"],
        "description": "Logs stringified JSON property with name."
    },
    "consoleTime": {
        "prefix": "ctm",
        "body": ["console.time('$2')"],
        "description": "Console time wrapper"
    },
    "consoleTimeEnd": {
        "prefix": "cte",
        "body": ["console.timeEnd('$2')"],
        "description": "Console time end wrapper"
    },
    "consoleWarn": {
        "prefix": "cwa",
        "body": ["console.warn($2)"],
        "description": "Displays a message in the console but also displays a yellow warning icon along with the logged message"
    },
    "consoleInfo": {
        "prefix": "cin",
        "body": ["console.info($2)"],
        "description": "Displays a message in the console but also displays a blue information icon along with the logged message"
    },
    "consoleTable": {
        "prefix": "ctl",
        "body": ["console.table([$2])"],
        "description": "Logs table to console"
    },
    "useCallback": {
        "prefix": "useCallbackSnippet",
        "body": [
            "useCallback(",
            "  () => {",
            "    $2",
            "  },",
            "  [${2:second}],",
            ")",
            ""
        ]
    },
    "useContext": {
        "prefix": "useContextSnippet",
        "body": ["const $2 = useContext(${2:second})"]
    },
    "useEffect": {
        "prefix": "useEffectSnippet",
        "body": [
            "useEffect(() => {",
            "  $2",
            "",
            "  return () => {",
            "    ${2:second}",
            "  }",
            "}, [${3:third}])",
            ""
        ]
    },
    "useImperativeHandle": {
        "prefix": "useImperativeHandleSnippet",
        "body": [
            "useImperativeHandle(",
            "  $2,",
            "  () => {",
            "    ${2:second}",
            "  },",
            "  [${3:third}],",
            ")"
        ]
    },
    "useLayoutEffect": {
        "prefix": "useLayoutEffectSnippet",
        "body": [
            "useLayoutEffect(() => {",
            "  $2",
            "",
            "  return () => {",
            "    ${2:second}",
            "  };",
            "}, [${3:third}])"
        ]
    },
    "useMemo": {
        "prefix": "useMemoSnippet",
        "body": ["useMemo(() => $2, [${2:second}])"]
    },
    "useReducer": {
        "prefix": "useReducerSnippet",
        "body": [
            "const [state, dispatch] = useReducer($2, ${2:second}, ${3:third})"
        ]
    },
    "useRef": {
        "prefix": "useRefSnippet",
        "body": ["const $2 = useRef(${2:second})"]
    },
    "useState": {
        "prefix": "useStateSnippet",
        "body": [
            "const [$2, set${1/(.*)/${1:/capitalize}/}] = useState(${2:second})"
        ]
    },
    "importAs": {
        "prefix": "ima",
        "body": ["import { ${2:second} as ${3:third} } from '$2'"]
    },
    "importBrowserRouter": {
        "prefix": "imbr",
        "body": ["import { BrowserRouter as Router } from 'react-router-dom'"]
    },
    "importBrowserRouterWithRouteAndNavLink": {
        "prefix": "imrr",
        "body": [
            "import { BrowserRouter as Router, Route, NavLink } from 'react-router-dom'",
            ""
        ]
    },
    "importDestructing": {
        "prefix": "imd",
        "body": ["import { ${2:second} } from '$2'"]
    },
    "importEverything": {
        "prefix": "ime",
        "body": ["import * as ${2:second} from '$2'"]
    },
    "importNoModuleName": {
        "prefix": "imn",
        "body": ["import '$2'"]
    },
    "importPropTypes": {
        "prefix": "impt",
        "body": ["import PropTypes from 'prop-types'"]
    },
    "importReact": {
        "prefix": "imr",
        "body": ["import React from 'react'"]
    },
    "importReactDom": {
        "prefix": "imrd",
        "body": ["import ReactDOM from 'react-dom'"]
    },
    "importReactWithComponent": {
        "prefix": "imrc",
        "body": ["import React, { Component } from 'react'"]
    },
    "importReactWithComponentAndPropTypes": {
        "prefix": "imrcp",
        "body": [
            "import React, { Component } from 'react'",
            "import PropTypes from 'prop-types'",
            ""
        ]
    },
    "importReactWithMemo": {
        "prefix": "imrm",
        "body": ["import React, { memo } from 'react'"]
    },
    "importReactWithMemoAndPropTypes": {
        "prefix": "imrmp",
        "body": [
            "import React, { memo } from 'react'",
            "import PropTypes from 'prop-types'",
            ""
        ]
    },
    "importReactWithPureComponent": {
        "prefix": "imrpc",
        "body": ["import React, { PureComponent } from 'react'"]
    },
    "importReactWithPureComponentAndPropTypes": {
        "prefix": "imrpcp",
        "body": [
            "import React, { PureComponent } from 'react'",
            "import PropTypes from 'prop-types'",
            ""
        ]
    },
    "importRouterLink": {
        "prefix": "imbrl",
        "body": ["import { Link } from 'react-router-dom'"]
    },
    "importRouterNavLink": {
        "prefix": "imbrnl",
        "body": ["import { NavLink } from 'react-router-dom'"]
    },
    "importRouterSetup": {
        "prefix": "imbrc",
        "body": [
            "import { Route, Switch, NavLink, Link } from 'react-router-dom'"
        ]
    },
    "importRouterSwitch": {
        "prefix": "imbrs",
        "body": ["import { Switch } from 'react-router-dom'"]
    },
    "import": {
        "prefix": "imp",
        "body": ["import ${2:second} from '$2'"]
    },
    "propTypeArray": {
        "prefix": "pta",
        "body": ["PropTypes.array"],
        "description": "Array prop type"
    },
    "propTypeArrayRequired": {
        "prefix": "ptar",
        "body": ["PropTypes.array.isRequired"],
        "description": "Array prop type required"
    },
    "propTypeBool": {
        "prefix": "ptb",
        "body": ["PropTypes.bool"],
        "description": "Bool prop type"
    },
    "propTypeBoolRequired": {
        "prefix": "ptbr",
        "body": ["PropTypes.bool.isRequired"],
        "description": "Bool prop type required"
    },
    "propTypeFunc": {
        "prefix": "ptf",
        "body": ["PropTypes.func"],
        "description": "Func prop type"
    },
    "propTypeFuncRequired": {
        "prefix": "ptfr",
        "body": ["PropTypes.func.isRequired"],
        "description": "Func prop type required"
    },
    "propTypeNumber": {
        "prefix": "ptn",
        "body": ["PropTypes.number"],
        "description": "Number prop type"
    },
    "propTypeNumberRequired": {
        "prefix": "ptnr",
        "body": ["PropTypes.number.isRequired"],
        "description": "Number prop type required"
    },
    "propTypeObject": {
        "prefix": "pto",
        "body": ["PropTypes.object"],
        "description": "Object prop type"
    },
    "propTypeObjectRequired": {
        "prefix": "ptor",
        "body": ["PropTypes.object.isRequired"],
        "description": "Object prop type required"
    },
    "propTypeString": {
        "prefix": "pts",
        "body": ["PropTypes.string"],
        "description": "String prop type"
    },
    "propTypeStringRequired": {
        "prefix": "ptsr",
        "body": ["PropTypes.string.isRequired"],
        "description": "String prop type required"
    },
    "propTypeNode": {
        "prefix": "ptnd",
        "body": ["PropTypes.node"],
        "description": "Anything that can be rendered: numbers, strings, elements or an array"
    },
    "propTypeNodeRequired": {
        "prefix": "ptndr",
        "body": ["PropTypes.node.isRequired"],
        "description": "Anything that can be rendered: numbers, strings, elements or an array required"
    },
    "propTypeElement": {
        "prefix": "ptel",
        "body": ["PropTypes.element"],
        "description": "React element prop type"
    },
    "propTypeElementRequired": {
        "prefix": "ptelr",
        "body": ["PropTypes.element.isRequired"],
        "description": "React element prop type required"
    },
    "propTypeInstanceOf": {
        "prefix": "pti",
        "body": ["PropTypes.instanceOf($0)"],
        "description": "Is an instance of a class prop type"
    },
    "propTypeInstanceOfRequired": {
        "prefix": "ptir",
        "body": ["PropTypes.instanceOf($0).isRequired"],
        "description": "Is an instance of a class prop type required"
    },
    "propTypeEnum": {
        "prefix": "pte",
        "body": ["PropTypes.oneOf(['$0'])"],
        "description": "Prop type limited to specific values by treating it as an enum"
    },
    "propTypeEnumRequired": {
        "prefix": "pter",
        "body": ["PropTypes.oneOf(['$0']).isRequired"],
        "description": "Prop type limited to specific values by treating it as an enum required"
    },
    "propTypeOneOfType": {
        "prefix": "ptet",
        "body": ["PropTypes.oneOfType([", "  $0", "])"],
        "description": "An object that could be one of many types"
    },
    "propTypeOneOfTypeRequired": {
        "prefix": "ptetr",
        "body": ["PropTypes.oneOfType([", "  $0", "]).isRequired"],
        "description": "An object that could be one of many types required"
    },
    "propTypeArrayOf": {
        "prefix": "ptao",
        "body": ["PropTypes.arrayOf($0)"],
        "description": "An array of a certain type"
    },
    "propTypeArrayOfRequired": {
        "prefix": "ptaor",
        "body": ["PropTypes.arrayOf($0).isRequired"],
        "description": "An array of a certain type required"
    },
    "propTypeObjectOf": {
        "prefix": "ptoo",
        "body": ["PropTypes.objectOf($0)"],
        "description": "An object with property values of a certain type"
    },
    "propTypeObjectOfRequired": {
        "prefix": "ptoor",
        "body": ["PropTypes.objectOf($0).isRequired"],
        "description": "An object with property values of a certain type required"
    },
    "propTypeShape": {
        "prefix": "ptsh",
        "body": ["PropTypes.shape({", "  $0", "})"],
        "description": "An object taking on a particular shape"
    },
    "propTypeShapeRequired": {
        "prefix": "ptshr",
        "body": ["PropTypes.shape({", "  $0", "}).isRequired"],
        "description": "An object taking on a particular shape required"
    },
    "propTypeExact": {
        "prefix": "ptex",
        "body": ["PropTypes.exact({", "  $0", "})"],
        "description": "An object with warnings on extra properties"
    },
    "propTypeExactRequired": {
        "prefix": "ptexr",
        "body": ["PropTypes.exact({", "  $0", "}).isRequired"],
        "description": "An object with warnings on extra properties required"
    },
    "propTypeAny": {
        "prefix": "ptany",
        "body": ["PropTypes.any"],
        "description": "Any prop type"
    },
    "reactNativeComponent": {
        "prefix": "rnc",
        "body": [
            "import { Text, View } from 'react-native'",
            "import React, { Component } from 'react'",
            "",
            "export default class ${1:ComponentName} extends Component {",
            "  render() {",
            "    return (",
            "      <View>",
            "        <Text>$2</Text>",
            "      </View>",
            "    )",
            "  }",
            "}"
        ]
    },
    "reactNativeComponentExport": {
        "prefix": "rnce",
        "body": [
            "import { Text, View } from 'react-native'",
            "import React, { Component } from 'react'",
            "",
            "export class ${1:ComponentName} extends Component {",
            "  render() {",
            "    return (",
            "      <View>",
            "        <Text>$2</Text>",
            "      </View>",
            "    )",
            "  }",
            "}",
            "",
            "export default ${1:ComponentName}"
        ]
    },
    "reactNativeComponentWithStyles": {
        "prefix": "rncs",
        "body": [
            "import { Text, StyleSheet, View } from 'react-native'",
            "import React, { Component } from 'react'",
            "",
            "export default class ${1:ComponentName} extends Component {",
            "  render() {",
            "    return (",
            "      <View>",
            "        <Text>$2</Text>",
            "      </View>",
            "    )",
            "  }",
            "}",
            "",
            "const styles = StyleSheet.create({})"
        ]
    },
    "reactNativeFunctionalComponent": {
        "prefix": "rnf",
        "body": [
            "import { View, Text } from 'react-native'",
            "import React from 'react'",
            "",
            "export default function ${1:ComponentName}() {",
            "  return (",
            "    <View>",
            "      <Text>$2</Text>",
            "    </View>",
            "  )",
            "}"
        ]
    },
    "reactNativeFunctionalComponentWithStyles": {
        "prefix": "rnfs",
        "body": [
            "import { StyleSheet, Text, View } from 'react-native'",
            "import React from 'react'",
            "",
            "export default function ${1:ComponentName}() {",
            "  return (",
            "    <View>",
            "      <Text>$2</Text>",
            "    </View>",
            "  )",
            "}",
            "",
            "const styles = StyleSheet.create({})"
        ]
    },
    "reactNativeFunctionalExportComponent": {
        "prefix": "rnfe",
        "body": [
            "import { View, Text } from 'react-native'",
            "import React from 'react'",
            "",
            "const ${1:ComponentName} = () => {",
            "  return (",
            "    <View>",
            "      <Text>$2</Text>",
            "    </View>",
            "  )",
            "}",
            "",
            "export default ${1:ComponentName}"
        ]
    },
    "reactNativeFunctionalExportComponentWithStyles": {
        "prefix": "rnfes",
        "body": [
            "import { StyleSheet, Text, View } from 'react-native'",
            "import React from 'react'",
            "",
            "const ${1:ComponentName} = () => {",
            "  return (",
            "    <View>",
            "      <Text>$2</Text>",
            "    </View>",
            "  )",
            "}",
            "",
            "export default ${1:ComponentName}",
            "",
            "const styles = StyleSheet.create({})"
        ]
    },
    "reactNativeImport": {
        "prefix": "imrn",
        "body": ["import { $2 } from 'react-native'"]
    },
    "reactNativePureComponent": {
        "prefix": "rnpc",
        "body": [
            "import { Text, View } from 'react-native'",
            "import React, { PureComponent } from 'react'",
            "",
            "export default class ${1:ComponentName} extends PureComponent {",
            "  render() {",
            "    return (",
            "      <View>",
            "        <Text>$2</Text>",
            "      </View>",
            "    )",
            "  }",
            "}"
        ]
    },
    "reactNativePureComponentExport": {
        "prefix": "rnpce",
        "body": [
            "import { Text, View } from 'react-native'",
            "import React, { PureComponent } from 'react'",
            "",
            "export class ${1:ComponentName} extends PureComponent {",
            "  render() {",
            "    return (",
            "      <View>",
            "        <Text>$2</Text>",
            "      </View>",
            "    )",
            "  }",
            "}",
            "",
            "export default ${1:ComponentName}"
        ]
    },
    "reactNativeStyles": {
        "prefix": "rnstyle",
        "body": ["const styles = StyleSheet.create({$2})"]
    },
    "importReduxConnect": {
        "prefix": "redux",
        "body": ["import { connect } from 'react-redux'"]
    },
    "reduxAction": {
        "prefix": "rxaction",
        "body": [
            "export const $2 = (payload) => ({",
            "  type: ${2:second},",
            "  payload",
            "})",
            ""
        ]
    },
    "reduxConst": {
        "prefix": "rxconst",
        "body": ["export const $2 = '$2'"]
    },
    "reduxReducer": {
        "prefix": "rxreducer",
        "body": [
            "const initialState = {}",
            "",
            "export default (state = initialState, { type, payload }) => {",
            "  switch (type) {",
            "",
            "  case $2:",
            "    return { ...state, ...payload }",
            "",
            "  default:",
            "    return state",
            "  }",
            "}",
            ""
        ]
    },
    "reduxSelector": {
        "prefix": "rxselect",
        "body": [
            "import { createSelector } from 'reselect'",
            "",
            "export const $2 = state => state.${2:second}"
        ]
    },
    "reduxSlice": {
        "prefix": "rxslice",
        "body": [
            "import { createSlice } from '@reduxjs/toolkit'",
            "",
            "const initialState = {",
            "",
            "}",
            "",
            "const ${1:ComponentName} = createSlice({",
            "  name: ${2:second},",
            "  initialState,",
            "  reducers: {}",
            "});",
            "",
            "export const {} = ${1:ComponentName}.actions",
            "",
            "export default ${1:ComponentName}.reducer"
        ]
    },
    "mappingToProps": {
        "prefix": "reduxmap",
        "body": [
            "const mapStateToProps = (state) => ({})",
            "",
            "const mapDispatchToProps = {}"
        ]
    },
    "describeBlock": {
        "prefix": "desc",
        "body": ["describe('$2', () => { ${2:second} })"],
        "description": "Testing `describe` block"
    },
    "itAsyncBlock": {
        "prefix": "tita",
        "body": ["it('should $2', async () => { ${2:second} })"],
        "description": "Testing asynchronous `it` block"
    },
    "itBlock": {
        "prefix": "tit",
        "body": ["it('should $2', () => { ${2:second} })"],
        "description": "Testing `it` block"
    },
    "setupReactComponentTestWithRedux": {
        "prefix": "srtest",
        "body": [
            "import React from 'react'",
            "import renderer from 'react-test-renderer'",
            "import { Provider } from 'react-redux'",
            "",
            "import store from '~/store'",
            "import { ${1:ComponentName} } from '../${1:ComponentName}'",
            "",
            "describe('<${1:ComponentName} />', () => {",
            "  const defaultProps = {}",
            "  const wrapper = renderer.create(",
            "    <Provider store={store}>",
            "     <${1:ComponentName} {...defaultProps} />",
            "    </Provider>,",
            "  )",
            "",
            "  test('render', () => {",
            "    expect(wrapper).toMatchSnapshot()",
            "  })",
            "})"
        ],
        "description": "Create test component"
    },
    "setupReactNativeTest": {
        "prefix": "sntest",
        "body": [
            "import 'react-native'",
            "import React from 'react'",
            "import renderer from 'react-test-renderer'",
            "",
            "import ${1:ComponentName} from '../${1:ComponentName}'",
            "",
            "describe('<${1:ComponentName} />', () => {",
            "  const defaultProps = {}",
            "  const wrapper = renderer.create(<${1:ComponentName} {...defaultProps} />)",
            "",
            "  test('render', () => {",
            "    expect(wrapper).toMatchSnapshot()",
            "  })",
            "})"
        ]
    },
    "setupReactNativeTestWithRedux": {
        "prefix": "snrtest",
        "body": [
            "import 'react-native'",
            "import React from 'react'",
            "import renderer from 'react-test-renderer'",
            "import { Provider } from 'react-redux'",
            "",
            "import store from '~/store'",
            "import ${1:ComponentName} from '../${1:ComponentName}'",
            "",
            "describe('<${1:ComponentName} />', () => {",
            "  const defaultProps = {}",
            "  const wrapper = renderer.create(",
            "    <Provider store={store}>",
            "      <${1:ComponentName} {...defaultProps} />",
            "    </Provider>,",
            "  )",
            "",
            "  test('render', () => {",
            "    expect(wrapper).toMatchSnapshot()",
            "  })",
            "})"
        ]
    },
    "setupReactTest": {
        "prefix": "stest",
        "body": [
            "import React from 'react'",
            "import renderer from 'react-test-renderer'",
            "",
            "import { ${1:ComponentName} } from '../${1:ComponentName}'",
            "",
            "describe('<${1:ComponentName} />', () => {",
            "  const defaultProps = {}",
            "  const wrapper = renderer.create(<${1:ComponentName} {...defaultProps} />)",
            "",
            "  test('render', () => {",
            "    expect(wrapper).toMatchSnapshot()",
            "  })",
            "})"
        ]
    },
    "testAsyncBlock": {
        "prefix": "testa",
        "body": ["test('should $2', async () => { ${2:second} })"],
        "description": "Testing `asynchronous test` block"
    },
    "testBlock": {
        "prefix": "test",
        "body": ["test('should $2', () => { ${2:second} })"],
        "description": "Testing `test` block"
    },
    "exportDefault": {
        "prefix": "exp",
        "body": ["export default $2"]
    },
    "exportDestructing": {
        "prefix": "exd",
        "body": ["export { ${2:second} } from '$2'"]
    },
    "exportAs": {
        "prefix": "exa",
        "body": ["export { ${2:second} as ${3:third} } from '$2'"]
    },
    "exportNamedFunction": {
        "prefix": "enf",
        "body": ["export const $2 = (${2:second}) => {${3:third}}"],
        "description": "Export named function"
    },
    "exportDefaultFunction": {
        "prefix": "edf",
        "body": ["export default ($2) => {${2:second}}"],
        "description": "Export default function"
    },
    "exportDefaultNamedFunction": {
        "prefix": "ednf",
        "body": ["export default function $2(${2:second}) {${3:third}}"],
        "description": "Export default named function"
    },
    "method": {
        "prefix": "met",
        "body": ["$2 = (${2:second}) => {${3:third}}"],
        "description": "Creates a method inside a class"
    },
    "propertyGet": {
        "prefix": "pge",
        "body": ["get $2() {", "  return this.${2:second}", "}"],
        "description": "Creates a getter property inside a class"
    },
    "propertySet": {
        "prefix": "pse",
        "body": ["set $2(${2:second}) {${3:third}}"],
        "description": "Creates a setter property inside a class"
    },
    "forEach": {
        "prefix": "fre",
        "body": ["$2.forEach(${2:second} => {${3:third}})"],
        "description": "Creates a forEach statement"
    },
    "forOf": {
        "prefix": "fof",
        "body": ["for(let $2 of ${2:second}) {${3:third}}"],
        "description": "Iterating over property names of iterable objects"
    },
    "forIn": {
        "prefix": "fin",
        "body": ["for(let $2 in ${2:second}) {${3:third}}"],
        "description": "Iterating over property values of iterable objects"
    },
    "anonymousFunction": {
        "prefix": "anfn",
        "body": ["($2) => { ${2:second} }"],
        "description": "Creates an anonymous function"
    },
    "namedFunction": {
        "prefix": "nfn",
        "body": ["const $2 = (${2:second}) => { ${3:third} }"],
        "description": "Creates a named function"
    },
    "destructingObject": {
        "prefix": "dob",
        "body": ["const {${2:second}} = $2"],
        "description": "Creates and assigns a local variable using object destructing"
    },
    "destructingArray": {
        "prefix": "dar",
        "body": ["const [${2:second}] = $2"],
        "description": "Creates and assigns a local variable using array destructing"
    },
    "setInterval": {
        "prefix": "sti",
        "body": ["setInterval(() => { $2 }, ${2:second})"],
        "description": "Executes the given function at specified intervals"
    },
    "setTimeOut": {
        "prefix": "sto",
        "body": ["setTimeout(() => { $2 }, ${2:second})"],
        "description": "Executes the given function after the specified delay"
    },
    "promise": {
        "prefix": "prom",
        "body": ["return new Promise((resolve, reject) => { $2 })"],
        "description": "Creates and returns a new Promise in the standard ES7 syntax"
    },
    "destructProps": {
        "prefix": "cp",
        "body": ["const { $2 } = this.props"],
        "description": "Creates and assigns a local variable using props destructing"
    },
    "destructState": {
        "prefix": "cs",
        "body": ["const { $2 } = this.state"],
        "description": "Creates and assigns a local variable using state destructing"
    },
    "classConstructor": {
        "prefix": "rconst",
        "body": [
            "constructor(props) {",
            "  super(props)",
            "",
            "  this.state = {",
            "     $2",
            "  }",
            "}"
        ],
        "description": "Adds a default constructor for it('', () => {})the class that contains props as arguments"
    },
    "emptyState": {
        "prefix": "est",
        "body": ["state = { $2 }"],
        "description": "Creates empty state object. To be used in a constructor."
    },
    "componentDidMount": {
        "prefix": "cdm",
        "body": ["componentDidMount() { $2 }"],
        "description": "Invoked once, only on the client (not on the server), immediately after the initial rendering occurs."
    },
    "shouldComponentUpdate": {
        "prefix": "scu",
        "body": ["shouldComponentUpdate(nextProps, nextState) { $2 }"],
        "description": "Invoked before rendering when new props or state are being received. "
    },
    "componentDidUpdate": {
        "prefix": "cdup",
        "body": ["componentDidUpdate(prevProps, prevState) { $2} "],
        "description": "Invoked immediately after the component's updates are flushed to the DOM."
    },
    "componentWillUnmount": {
        "prefix": "cwun",
        "body": ["componentWillUnmount() {$2 }"],
        "description": "Invoked immediately before a component is unmounted from the DOM."
    },
    "getDerivedStateFromProps": {
        "prefix": "gdsfp",
        "body": ["static getDerivedStateFromProps(props, state) {$2}"],
        "description": "Invoked right before calling the render method, both on the initial mount and on subsequent updates."
    },
    "getSnapshotBeforeUpdate": {
        "prefix": "gsbu",
        "body": ["getSnapshotBeforeUpdate = (prevProps, prevState) => {$2}"],
        "description": "Called right before mutations are made (e.g. before the DOM is updated)"
    },
    "createContext": {
        "prefix": "rcontext",
        "body": ["const $2 = React.createContext()"],
        "description": "Create React context"
    },
    "createRef": {
        "prefix": "cref",
        "body": ["this.$2Ref = React.createRef()"],
        "description": "Create ref statement used inside constructor"
    },
    "componentSetStateObject": {
        "prefix": "sst",
        "body": ["this.setState({$2})"],
        "description": "Performs a shallow merge of nextState into current state"
    },
    "componentSetStateFunc": {
        "prefix": "ssf",
        "body": ["this.setState((state, props) => { return { $2 }})"],
        "description": "Performs a shallow merge of nextState into current state"
    },
    "componentProps": {
        "prefix": "props",
        "body": ["this.props.$2"],
        "description": "Access component's props"
    },
    "componentState": {
        "prefix": "state",
        "body": ["this.state.$2"]
    },
    "bindThis": {
        "prefix": "bnd",
        "body": ["this.$2 = this.$2.bind(this)"],
        "description": "Binds this to a method"
    },
    "commentBigBlock": {
        "prefix": "cmmb",
        "body": ["/**", " * $2", " */"]
    },
    "hocComponentWithRedux": {
        "prefix": "hocredux",
        "body": [
            "import React from 'react'",
            "import { connect } from 'react-redux'",
            "import PropTypes from 'prop-types'",
            "",
            "export const mapStateToProps = state => ({})",
            "",
            "export const mapDispatchToProps = {}",
            "",
            "export const $2 = (WrappedComponent) => {",
            "  const hocComponent = ({ ...props }) => <WrappedComponent {...props} />",
            "",
            "  hocComponent.propTypes = {}",
            "",
            "  return hocComponent",
            "}",
            "",
            "export default WrapperComponent => connect(mapStateToProps, mapDispatchToProps)($2(WrapperComponent))",
            ""
        ]
    },
    "hocComponent": {
        "prefix": "hoc",
        "body": [
            "import React from 'react'",
            "import PropTypes from 'prop-types'",
            "",
            "export default (WrappedComponent) => {",
            "  const hocComponent = ({ ...props }) => <WrappedComponent {...props} />",
            "",
            "  hocComponent.propTypes = {}",
            "",
            "  return hocComponent",
            "}",
            ""
        ]
    },
    "typeofSnippet": {
        "prefix": "tpf",
        "body": ["typeof $2"]
    },

    // for javascript
    "setImmediate": {
        "prefix": "sim",
        "body": "setImmediate(() => {\n\t${0}\n})"
    },
    "await": {
        "prefix": "a",
        "body": "await ${0}"
    },
    "await Promise.all": {
        "prefix": "apa",
        "body": "await Promise.all(${1:value})"
    },
    "await Promise.all with destructuring": {
        "prefix": "apad",
        "body": "const [${0}] = await Promise.all(${1:value})"
    },
    "await Promise.all map": {
        "prefix": "apm",
        "body": "await Promise.all(${1:array}.map(async (${2:value}) => {\n\t${0}\n}))"
    },
    "await sleep": {
        "prefix": "ast",
        "body": "await new Promise((r) => setTimeout(r, ${0}))"
    },
    "Node callback": {
        "prefix": "cb",
        "body": "function (err, ${1:value}) {\n\tif (err) throw err\n\t${0}\n}"
    },
    "process.env": {
        "prefix": "pe",
        "body": "process.env"
    },
    "Promise.all": {
        "prefix": "pa",
        "body": "Promise.all(${1:value})"
    },
    "Promise.resolve": {
        "prefix": "prs",
        "body": "Promise.resolve(${1:value})"
    },
    "Promise.reject": {
        "prefix": "prj",
        "body": "Promise.reject(${1:value})"
    },
    "Promise": {
        "prefix": "p",
        "body": "Promise"
    },
    "new Promise": {
        "prefix": "np",
        "body": "new Promise((resolve, reject) => {\n\t${0}\n})"
    },
    "Promise.then": {
        "prefix": "pt",
        "body": "${1:promise}.then((${2:value}) => {\n\t${0}\n})"
    },
    "Promise.catch": {
        "prefix": "pc",
        "body": "${1:promise}.catch(error => {\n\t${0}\n})"
    },
    "describe": {
        "prefix": "desc",
        "body": "describe('${1:description}', () => {\n\t${0}\n})"
    },
    "describe top level": {
        "prefix": "dt",
        "body": "describe('${TM_FILENAME_BASE}', () => {\n\t${0}\n})"
    },
    "it asynchronous": {
        "prefix": "it",
        "body": "it('${1:description}', async () => {\n\t${0}\n})"
    },
    "it.todo": {
        "prefix": "itt",
        "body": "it.todo('${1:description}')"
    },
    "it with a callback": {
        "prefix": "itd",
        "body": "it('${1:description}', (done) => {\n\t${0}\n})"
    },
    "it synchronous": {
        "prefix": "its",
        "body": "it('${1:description}', () => {\n\t${0}\n})"
    },
    "before": {
        "prefix": "bf",
        "body": "before(async () => {\n\t${0}\n})"
    },
    "beforeAll": {
        "prefix": "ba",
        "body": "beforeAll(async () => {\n\t${0}\n})"
    },
    "beforeEach": {
        "prefix": "bfe",
        "body": "beforeEach(async () => {\n\t${0}\n})"
    },
    "after": {
        "prefix": "aft",
        "body": "after(() => {\n\t${0}\n})"
    },
    "afterEach": {
        "prefix": "afe",
        "body": "afterEach(() => {\n\t${0}\n})"
    },
    "require": {
        "prefix": "rq",
        "body": "require('${1:module}')"
    },
    "const module = require('module')": {
        "prefix": "cr",
        "body": "const ${1:module} = require('${1:module}')"
    },
    "exports.member": {
        "prefix": "em",
        "body": "exports.${1:member} = ${2:value}"
    },
    "module.exports": {
        "prefix": "me",
        "body": "module.exports = ${1:name}"
    },
    "module as class": {
        "prefix": "mec",
        "body": "class ${1:name} {\n\tconstructor (${2:arguments}) {\n\t\t${0}\n\t}\n}\n\nmodule.exports = ${1:name}\n"
    },
    "event handler": {
        "prefix": "on",
        "body": "${1:emitter}.on('${2:event}', (${3:arguments}) => {\n\t${0}\n})"
    },
    "dom event cancel default and propagation": {
        "prefix": "evc",
        "body": "ev.preventDefault()\nev.stopPropagation()\nreturn false"
    },
    "addEventListener": {
        "prefix": "ae",
        "body": "${1:document}.addEventListener('${2:event}', ${3:ev} => {\n\t${0}\n})"
    },
    "removeEventListener": {
        "prefix": "rel",
        "body": "${1:document}.removeEventListener('${2:event}', ${3:listener})"
    },
    "getElementById": {
        "prefix": "gi",
        "body": "${1:document}.getElementById('${2:id}')"
    },
    "getElementsByClassName": {
        "prefix": "gc",
        "body": "Array.from(${1:document}.getElementsByClassName('${2:class}'))"
    },
    "getElementsByTagName": {
        "prefix": "gt",
        "body": "Array.from(${1:document}.getElementsByTagName('${2:tag}'))"
    },
    "querySelector": {
        "prefix": "qs",
        "body": "${1:document}.querySelector('${2:selector}')"
    },
    "querySelectorAll": {
        "prefix": "qsa",
        "body": "Array.from(${1:document}.querySelectorAll('${2:selector}'))"
    },
    "createDocumentFragment": {
        "prefix": "cdf",
        "body": "${1:document}.createDocumentFragment(${2:elem})"
    },
    "createElement": {
        "prefix": "cel",
        "body": "${1:document}.createElement(${2:elem})"
    },
    "classList.add": {
        "prefix": "hecla",
        "body": "${1:el}.classList.add('${2:class}')"
    },
    "classList.remove": {
        "prefix": "heclr",
        "body": "${1:el}.classList.remove('${2:class}')"
    },
    "classList.toggle": {
        "prefix": "hect",
        "body": "${1:el}.classList.toggle('${2:class}')"
    },
    "getAttribute": {
        "prefix": "hega",
        "body": "${1:el}.getAttribute('${2:attr}')"
    },
    "removeAttribute": {
        "prefix": "hera",
        "body": "${1:el}.removeAttribute('${2:attr}')"
    },
    "setAttribute": {
        "prefix": "hesa",
        "body": "${1:el}.setAttribute('${2:attr}', ${3:value})"
    },
    "appendChild": {
        "prefix": "heac",
        "body": "${1:el}.appendChild(${2:elem})"
    },
    "removeChild": {
        "prefix": "herc",
        "body": "${1:el}.removeChild(${2:elem})"
    },
    "forEach loop": {
        "prefix": "fe",
        "body": "${1:iterable}.forEach((${2:item}) => {\n\t${0}\n})"
    },
    "map": {
        "prefix": "map",
        "body": "${1:iterable}.map((${2:item}) => {\n\t${0}\n})"
    },
    "reduce": {
        "prefix": "reduce",
        "body": "${1:iterable}.reduce((${2:previous}, ${3:current}) => {\n\t${0}\n}${4:, initial})"
    },
    "filter": {
        "prefix": "filter",
        "body": "${1:iterable}.filter((${2:item}) => {\n\t${0}\n})"
    },
    "find": {
        "prefix": "find",
        "body": "${1:iterable}.find((${2:item}) => {\n\t${0}\n})"
    },
    "every": {
        "prefix": "every",
        "body": "${1:iterable}.every((${2:item}) => {\n\t${0}\n})"
    },
    "some": {
        "prefix": "some",
        "body": "${1:iterable}.some((${2:item}) => {\n\t${0}\n})"
    },
    "var statement": {
        "prefix": "v",
        "body": "var ${1:name}"
    },
    "var assignment": {
        "prefix": "va",
        "body": "var ${1:name} = ${2:value}"
    },
    "let statement": {
        "prefix": "l",
        "body": "let ${1:name}"
    },
    "const statement": {
        "prefix": "c",
        "body": "const ${1:name}"
    },
    "const statement from destructuring": {
        "prefix": "cd",
        "body": "const { ${2:prop} } = ${1:value}"
    },
    "const statement from array destructuring": {
        "prefix": "cad",
        "body": "const [ ${2:prop} ] = ${1:value}"
    },
    "const assignment awaited": {
        "prefix": "ca",
        "body": "const ${1:name} = await ${2:value}"
    },
    "const destructuring assignment awaited": {
        "prefix": "cda",
        "body": "const { ${1:name} } = await ${2:value}"
    },
    "const arrow function assignment": {
        "prefix": "cf",
        "body": "const ${1:name} = (${2:arguments}) => {\n\treturn ${0}\n}"
    },
    "let assignment awaited": {
        "prefix": "la",
        "body": "let ${1:name} = await ${2:value}"
    },
    "const assignment yielded": {
        "prefix": "cy",
        "body": "const ${1:name} = yield ${2:value}"
    },
    "let assignment yielded": {
        "prefix": "ly",
        "body": "let ${1:name} = yield ${2:value}"
    },
    "const object": {
        "prefix": "co",
        "body": "const ${1:name} = {\n\t${0}\n}"
    },
    "const array": {
        "prefix": "car",
        "body": "const ${1:name} = [\n\t${0}\n]"
    },
    "generate array of integers starting with 1": {
        "prefix": "gari",
        "body": "Array.from({ length: ${1:length} }, (v, k) => k + 1)"
    },
    "generate array of integers starting with 0": {
        "prefix": "gari0",
        "body": "[...Array(${1:length}).keys()]"
    },
    "class": {
        "prefix": "cs",
        "body": "class ${1:name} {\n\tconstructor (${2:arguments}) {\n\t\t${0}\n\t}\n}"
    },
    "class extends": {
        "prefix": "csx",
        "body": "class ${1:name} extends ${2:base} {\n\tconstructor (${3:arguments}) {\n\t\tsuper(${3:arguments})\n\t\t${0}\n\t}\n}"
    },
    "module export": {
        "prefix": "e",
        "body": "export ${1:member}"
    },
    "module export const": {
        "prefix": "ec",
        "body": "export const ${1:member} = ${2:value}"
    },
    "export named function": {
        "prefix": "ef",
        "body": "export function ${1:member} (${2:arguments}) {\n\t${0}\n}"
    },
    "module default export": {
        "prefix": "ed",
        "body": "export default ${1:member}"
    },
    "module default export function": {
        "prefix": "edf",
        "body": "export default function ${1:name} (${2:arguments}) {\n\t${0}\n}"
    },
    "import module": {
        "prefix": "im",
        "body": "import ${2:*} from '${1:module}'"
    },
    "import module as": {
        "prefix": "ia",
        "body": "import ${2:*} as ${3:name} from '${1:module}'"
    },
    "import module destructured": {
        "prefix": "id",
        "body": "import {$2} from '${1:module}'"
    },
    "typeof": {
        "prefix": "to",
        "body": "typeof ${1:source} === '${2:undefined}'"
    },
    "this": {
        "prefix": "t",
        "body": "this."
    },
    "instanceof": {
        "prefix": "iof",
        "body": "${1:source} instanceof ${2:Object}"
    },
    "let and if statement": {
        "prefix": "lif",
        "body": "let ${0} \n if (${2:condition}) {\n\t${1}\n}"
    },
    "else statement": {
        "prefix": "el",
        "body": "else {\n\t${0}\n}"
    },
    "else if statement": {
        "prefix": "ei",
        "body": "else if (${1:condition}) {\n\t${0}\n}"
    },
    "while iteration decrementing": {
        "prefix": "wid",
        "body": "let ${1:array}Index = ${1:array}.length\nwhile (${1:array}Index--) {\n\t${0}\n}"
    },
    "throw new Error": {
        "prefix": "tn",
        "body": "throw new ${0:error}"
    },
    "try/catch": {
        "prefix": "tc",
        "body": "try {\n\t${0}\n} catch (${1:err}) {\n\t\n}"
    },
    "try/finally": {
        "prefix": "tf",
        "body": "try {\n\t${0}\n} finally {\n\t\n}"
    },
    "try/catch/finally": {
        "prefix": "tcf",
        "body": "try {\n\t${0}\n} catch (${1:err}) {\n\t\n} finally {\n\t\n}"
    },
    "anonymous function": {
        "prefix": "fan",
        "body": "function (${1:arguments}) {${0}}"
    },
    "named function": {
        "prefix": "fn",
        "body": "function ${1:name} (${2:arguments}) {\n\t${0}\n}"
    },
    "async function": {
        "prefix": "asf",
        "body": "async function (${1:arguments}) {\n\t${0}\n}"
    },
    "async arrow function": {
        "prefix": "aa",
        "body": "async (${1:arguments}) => {\n\t${0}\n}"
    },
    "immediately-invoked function expression": {
        "prefix": "iife",
        "body": ";(function (${1:arguments}) {\n\t${0}\n})(${2})"
    },
    "async immediately-invoked function expression": {
        "prefix": "aiife",
        "body": ";(async (${1:arguments}) => {\n\t${0}\n})(${2})"
    },
    "arrow function": {
        "prefix": "af",
        "body": "(${1:arguments}) => ${2:statement}"
    },
    "arrow function with destructuring": {
        "prefix": "fd",
        "body": "({${1:arguments}}) => ${2:statement}"
    },
    "arrow function with destructuring returning destructured": {
        "prefix": "fdr",
        "body": "({${1:arguments}}) => ${1:arguments}"
    },
    "arrow function with body": {
        "prefix": "f",
        "body": "(${1:arguments}) => {\n\t${0}\n}"
    },
    "arrow function with return": {
        "prefix": "fr",
        "body": "(${1:arguments}) => {\n\treturn ${0}\n}"
    },
    "generator function": {
        "prefix": "gf",
        "body": "function* (${1:arguments}) {\n\t${0}\n}"
    },
    "named generator": {
        "prefix": "gfn",
        "body": "function* ${1:name}(${2:arguments}) {\n\t${0}\n}"
    },
    "console.log": {
        "prefix": "cl",
        "body": "console.log(${0})"
    },
    "console.log with log": {
        "prefix": "log",
        "body": "console.log(${0})"
    },
    "console.log a variable": {
        "prefix": "cv",
        "body": "console.log('${1}:', ${1})"
    },
    "console.error": {
        "prefix": "ce",
        "body": "console.error(${0})"
    },
    "console.warn": {
        "prefix": "cw",
        "body": "console.warn(${0})"
    },
    "console.dir": {
        "prefix": "cod",
        "body": "console.dir('${1}:', ${1})"
    },
    "constructor": {
        "prefix": "cn",
        "body": "constructor () {\n\t${0}\n}"
    },
    "use strict": {
        "prefix": "uss",
        "body": "'use strict'"
    },
    "JSON.stringify()": {
        "prefix": "js",
        "body": "JSON.stringify($0)"
    },
    "JSON.parse()": {
        "prefix": "jp",
        "body": "JSON.parse($0)"
    },
    "method": {
        "prefix": "m",
        "body": "${1:method} (${2:arguments}) {\n\t${0}\n}"
    },
    "getter": {
        "prefix": "get",
        "body": "get ${1:property} () {\n\t${0}\n}"
    },
    "setter": {
        "prefix": "set",
        "body": "set ${1:property} (${2:value}) {\n\t${0}\n}"
    },
    "getter + setter": {
        "prefix": "gs",
        "body": "get ${1:property} () {\n\t${0}\n}\nset ${1:property} (${2:value}) {\n\t\n}"
    },
    "prototype method": {
        "prefix": "proto",
        "body": "${1:Class}.prototype.${2:method} = function (${3:arguments}) {\n\t${0}\n}"
    },
    "Object.assign": {
        "prefix": "oa",
        "body": "Object.assign(${1:dest}, ${2:source})"
    },
    "Object.create": {
        "prefix": "oc",
        "body": "Object.create(${1:obj})"
    },
    "Object.getOwnPropertyDescriptor": {
        "prefix": "og",
        "body": "Object.getOwnPropertyDescriptor(${1:obj}, '${2:prop}')"
    },
    "ternary": {
        "prefix": "te",
        "body": "${1:cond} ? ${2:true} : ${3:false}"
    },
    "ternary assignment": {
        "prefix": "ta",
        "body": "const ${0} = ${1:cond} ? ${2:true} : ${3:false}"
    },
    "Object.defineProperty": {
        "prefix": "od",
        "body": "Object.defineProperty(${1:dest}, '${2:prop}', {\n\t${0}\n})"
    },
    "Object.keys": {
        "prefix": "ok",
        "body": "Object.keys(${1:obj})"
    },
    "Object.values": {
        "prefix": "ov",
        "body": "Object.values(${1:obj})"
    },
    "Object.entries": {
        "prefix": "oe",
        "body": "Object.entries(${1:obj})"
    },
    "return": {
        "prefix": "r",
        "body": "return ${0}"
    },
    "return arrow function": {
        "prefix": "rf",
        "body": "return (${1:arguments}) => ${2:statement}"
    },
    "yield": {
        "prefix": "y",
        "body": "yield ${0}"
    },
    "return this": {
        "prefix": "rt",
        "body": "return ${0:this}"
    },
    "return null": {
        "prefix": "rn",
        "body": "return null"
    },
    "return new object": {
        "prefix": "ro",
        "body": "return {\n\t${0}\n}"
    },
    "return new array": {
        "prefix": "ra",
        "body": "return [\n\t${0}\n]"
    },
    "return promise": {
        "prefix": "rp",
        "body": "return new Promise((resolve, reject) => {\n\t${0}\n})"
    },
    "wrap selection in arrow function": {
        "prefix": "wrap selection in arrow function",
        "body": "() => {\n\t{$TM_SELECTED_TEXT}\n}",
        "description": "wraps text in arrow function"
    },
    "wrap selection in async arrow function": {
        "prefix": "wrap selection in async arrow function",
        "body": "async () => {\n\t{$TM_SELECTED_TEXT}\n}",
        "description": "wraps text in arrow function"
    },
    "define module": {
        "prefix": "define",
        "body": [
            "define([",
            "\t'require',",
            "\t'${1:dependency}'",
            "], function(require, ${2:factory}) {",
            "\t'use strict';",
            "\t$0",
            "});"
        ],
        "description": "define module"
    },
    "For Loop": {
        "prefix": "for",
        "body": [
            "for (let ${1:index} = 0; ${1:index} < ${2:array}.length; ${1:index}++) {",
            "\tconst ${3:element} = ${2:array}[${1:index}];",
            "\t$0",
            "}"
        ],
        "description": "For Loop"
    },
    "For-Each Loop": {
        "prefix": "foreach",
        "body": ["${1:array}.forEach(${2:element} => {", "\t$0", "});"],
        "description": "For-Each Loop"
    },
    "For-In Loop": {
        "prefix": "forin",
        "body": [
            "for (const ${1:key} in ${2:object}) {",
            "\tif (${2:object}.hasOwnProperty(${1:key})) {",
            "\t\tconst ${3:element} = ${2:object}[${1:key}];",
            "\t\t$0",
            "\t}",
            "}"
        ],
        "description": "For-In Loop"
    },
    "For-Of Loop": {
        "prefix": "forof",
        "body": ["for (const ${1:iterator} of ${2:object}) {", "\t$0", "}"],
        "description": "For-Of Loop"
    },
    "For-Await-Of Loop": {
        "prefix": "forawaitof",
        "body": [
            "for await (const ${1:iterator} of ${2:object}) {",
            "\t$0",
            "}"
        ],
        "description": "For-Await-Of Loop"
    },
    "Function Statement": {
        "prefix": "function",
        "body": ["function ${1:name}(${2:params}) {", "\t$0", "}"],
        "description": "Function Statement"
    },
    "If Statement": {
        "prefix": "if",
        "body": ["if (${1:condition}) {", "\t$0", "}"],
        "description": "If Statement"
    },
    "If-Else Statement": {
        "prefix": "ifelse",
        "body": ["if (${1:condition}) {", "\t$2", "} else {", "\t$0", "}"],
        "description": "If-Else Statement"
    },
    "New Statement": {
        "prefix": "new",
        "body": ["const ${1:name} = new ${2:type}(${3:arguments});$0"],
        "description": "New Statement"
    },
    "Switch Statement": {
        "prefix": "switch",
        "body": [
            "switch (${1:key}) {",
            "\tcase ${2:value}:",
            "\t\t$0",
            "\t\tbreak;",
            "",
            "\tdefault:",
            "\t\tbreak;",
            "}"
        ],
        "description": "Switch Statement"
    },
    "While Statement": {
        "prefix": "while",
        "body": ["while (${1:condition}) {", "\t$0", "}"],
        "description": "While Statement"
    },
    "Do-While Statement": {
        "prefix": "dowhile",
        "body": ["do {", "\t$0", "} while (${1:condition});"],
        "description": "Do-While Statement"
    },
    "Try-Catch Statement": {
        "prefix": "trycatch",
        "body": ["try {", "\t$0", "} catch (${1:error}) {", "\t", "}"],
        "description": "Try-Catch Statement"
    },
    "Set Timeout Function": {
        "prefix": "settimeout",
        "body": ["setTimeout(() => {", "\t$0", "}, ${1:timeout});"],
        "description": "Set Timeout Function"
    },
    "Set Interval Function": {
        "prefix": "setinterval",
        "body": ["setInterval(() => {", "\t$0", "}, ${1:interval});"],
        "description": "Set Interval Function"
    },
    "Import external module.": {
        "prefix": "import statement",
        "body": ["import { $0 } from \"${1:module}\";"],
        "description": "Import external module."
    },
    "Region Start": {
        "prefix": "#region",
        "body": ["//#region $0"],
        "description": "Folding Region Start"
    },
    "Region End": {
        "prefix": "#endregion",
        "body": ["//#endregion"],
        "description": "Folding Region End"
    },
    "Log warning to console": {
        "prefix": "warn",
        "body": ["console.warn($1);", "$0"],
        "description": "Log warning to the console"
    },
    "Log error to console": {
        "prefix": "error",
        "body": ["console.error($1);", "$0"],
        "description": "Log error to the console"
    },
    "concat": {
        "prefix": "concat",
        "body": ["concat($1);", "$0"],
        "description": "The concat() method concatenates the string arguments to the calling string and returns a new string."
    },
    "endsWith": {
        "prefix": "endsWith",
        "body": ["endsWith($1);", "$0"],
        "description": "The endsWith() method determines whether a string ends with the characters of a specified string, returning true or false as appropriate.    "
    },
    "fromCharCode": {
        "prefix": "fromCharCode",
        "body": ["fromCharCode($1);", "$0"],
        "description": "The static String.fromCharCode() method returns a string created from the specified sequence of UTF-16 code units."
    },
    "includes": {
        "prefix": "includes",
        "body": ["includes($1);", "$0"],
        "description": "The includes() method performs a case-sensitive search to determine whether one string may be found within another string, returning true or false as appropriate."
    },
    "indexOf": {
        "prefix": "indexOf",
        "body": ["indexOf($1);", "$0"],
        "description": "The indexOf() method, given one argument: a substring to search for, searches the entire calling string, and returns the index of the first occurrence of the specified substring. Given a second argument: a number, the method returns the first occurrence of the specified substring at an index greater than or equal to the specified number."
    },
    "lastIndexOf": {
        "prefix": "lastIndexOf",
        "body": ["lastIndexOf($1);", "$0"],
        "description": "The lastIndexOf() method, given one argument: a substring to search for, searches the entire calling string, and returns the index of the last occurrence of the specified substring. Given a second argument: a number, the method returns the last occurrence of the specified substring at an index less than or equal to the specified number."
    },
    "localeCompare": {
        "prefix": "localeCompare",
        "body": ["localeCompare($1);", "$0"],
        "description": "The localeCompare() method returns a number indicating whether a reference string comes before, or after, or is the same as the given string in sort order. In implementations with Intl.Collator API support, this method simply calls Intl.Collator."
    },
    "match": {
        "prefix": "match",
        "body": ["match($1);", "$0"],
        "description": "The match() method retrieves the result of matching a string against a regular expression."
    },
    "matchAll": {
        "prefix": "matchAll",
        "body": ["matchAll($1);", "$0"],
        "description": "The matchAll() method returns an iterator of all results matching a string against a regular expression, including capturing groups."
    },
    "normalize": {
        "prefix": "normalize",
        "body": ["normalize($1);", "$0"],
        "description": "The normalize() method returns the Unicode Normalization Form of the string."
    },
    "repeat": {
        "prefix": "repeat",
        "body": ["repeat($1);", "$0"],
        "description": "The repeat() method constructs and returns a new string which contains the specified number of copies of the string on which it was called, concatenated together."
    },
    "replace": {
        "prefix": "replace",
        "body": ["replace($1, $2);", "$0"],
        "description": "The replace() method returns a new string with one, some, or all matches of a pattern replaced by a replacement. The pattern can be a string or a RegExp, and the replacement can be a string or a function called for each match. If pattern is a string, only the first occurrence will be replaced. The original string is left unchanged."
    },
    "replaceAll": {
        "prefix": "replaceAll",
        "body": ["replaceAll($1, $2);", "$0"],
        "description": "The replaceAll() method returns a new string with all matches of a pattern replaced by a replacement. The pattern can be a string or a RegExp, and the replacement can be a string or a function to be called for each match. The original string is left unchanged."
    },
    "search": {
        "prefix": "search",
        "body": ["search($1);", "$0"],
        "description": "The search() method executes a search for a match between a regular expression and this String object."
    },
    "slice": {
        "prefix": "slice",
        "body": ["slice($1);", "$0"],
        "description": "The slice() method extracts a section of a string and returns it as a new string, without modifying the original string."
    },
    "split": {
        "prefix": "split",
        "body": ["split($1);", "$0"],
        "description": "The split() method takes a pattern and divides a String into an ordered list of substrings by searching for the pattern, puts these substrings into an array, and returns the array."
    },
    "startsWith": {
        "prefix": "startsWith",
        "body": ["startsWith($1);", "$0"],
        "description": "The startsWith() method determines whether a string begins with the characters of a specified string, returning true or false as appropriate."
    },
    "substring": {
        "prefix": "substring",
        "body": ["substring($1);", "$0"],
        "description": "The substring() method returns the part of the string between the start and end indexes, or to the end of the string."
    },
    "toLocaleLowerCase": {
        "prefix": "toLocaleLowerCase",
        "body": ["toLocaleLowerCase($1);", "$0"],
        "description": "The toLocaleLowerCase() method returns the calling string value converted to lower case, according to any locale-specific case mappings."
    },
    "toLocaleUpperCase": {
        "prefix": "toLocaleUpperCase",
        "body": ["toLocaleUpperCase($1);", "$0"],
        "description": "The toLocaleUpperCase() method returns the calling string value converted to upper case, according to any locale-specific case mappings."
    },
    "toLowerCase": {
        "prefix": "toLowerCase",
        "body": ["toLowerCase()"],
        "description": "The toLowerCase() method returns the calling string value converted to lower case."
    },
    "toString": {
        "prefix": "toString",
        "body": ["toString()"],
        "description": "The toString() method returns a string representing the specified string value."
    },
    "toUpperCase": {
        "prefix": "toUpperCase",
        "body": ["toUpperCase()"],
        "description": "The toUpperCase() method returns the calling string value converted to uppercase (the value will be converted to a string if it isn't one)."
    },
    "valueOf": {
        "prefix": "valueOf",
        "body": ["valueOf()"],
        "description": "The valueOf() method returns the primitive value of a String object."
    },
    "isFinite": {
        "prefix": "isFinite",
        "body": ["isFinite($1);", "$0"],
        "description": "The Number.isFinite() method determines whether the passed value is a finite number — that is, it checks that a given value is a number, and the number is neither positive Infinity, negative Infinity, nor NaN."
    },
    "parseFloat": {
        "prefix": "parseFloat",
        "body": ["parseFloat($1);", "$0"],
        "description": "The Number.parseFloat() method parses an argument and returns a floating point number. If a number cannot be parsed from the argument, it returns NaN."
    },
    "isNaN": {
        "prefix": "isNaN",
        "body": ["isNaN($1);", "$0"],
        "description": "The Number.isNaN() method determines whether the passed value is the number value NaN, and returns false if the input is not of the Number type. It is a more robust version of the original, global isNaN() function."
    },
    "parseInt": {
        "prefix": "parseInt",
        "body": ["parseInt($1);", "$0"],
        "description": "The Number.parseInt() method parses a string argument and returns an integer of the specified radix or base."
    },
    "toFixed": {
        "prefix": "toFixed",
        "body": ["toFixed($1);", "$0"],
        "description": "The toFixed() method formats a number using fixed-point notation."
    },
    "toLocaleString": {
        "prefix": "toLocaleString",
        "body": ["toLocaleString($1);", "$0"],
        "description": "The toLocaleString() method returns a string with a language-sensitive representation of this number. In implementations with Intl.NumberFormat API support, this method simply calls Intl.NumberFormat."
    },
    "apply": {
        "prefix": "apply",
        "body": ["apply($1);", "$0"],
        "description": "The apply() method calls the specified function with a given this value, and arguments provided as an array (or an array-like object)."
    },
    "bind": {
        "prefix": "bind",
        "body": ["bind($1);", "$0"],
        "description": "The bind() method creates a new function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called."
    },
    "call": {
        "prefix": "call",
        "body": ["call($1);", "$0"],
        "description": "The call() method calls the function with a given this value and arguments provided individually."
    },
    "defineProperties": {
        "prefix": "defineProperties",
        "body": ["defineProperties($1, $2);", "$0"],
        "description": ""
    },
    "entries": {
        "prefix": "entries",
        "body": ["entries($1);", "$0"],
        "description": "The Object.entries() method returns an array of a given object's own enumerable string-keyed property key-value pairs."
    },
    "values": {
        "prefix": "values",
        "body": ["values($1);", "$0"],
        "description": "The Object.values() method returns an array of a given object's own enumerable string-keyed property values."
    },
    "focus": {
        "prefix": "focus",
        "body": ["focus()"],
        "description": "The HTMLElement.focus() method sets focus on the specified element, if it can be focused. The focused element is the element that will receive keyboard and similar events by default."
    },
    "blur": {
        "prefix": "blur",
        "body": ["blur()"],
        "description": ""
    },
    "innerText": {
        "prefix": "innerText",
        "body": ["innerText"],
        "description": "The innerText property of the HTMLElement interface represents the rendered text content of a node and its descendants."
    },
    "push": {
        "prefix": "push",
        "body": ["push($1);", "$0"],
        "description": "The push() method adds one or more elements to the end of an array and returns the new length of the array."
    },
    "reverse": {
        "prefix": "reverse",
        "body": ["reverse();", "$0"],
        "description": "The reverse() method reverses an array in place and returns the reference to the same array, the first array element now becoming the last, and the last array element becoming the first. In other words, elements order in the array will be turned towards the direction opposite to that previously stated."
    },
    "sort": {
        "prefix": "sort",
        "body": ["sort($1);", "$0"],
        "description": "The sort() method sorts the elements of an array in place and returns the reference to the same array, now sorted. The default sort order is ascending, built upon converting the elements into strings, then comparing their sequences of UTF-16 code units values."
    },
    "splice": {
        "prefix": "splice",
        "body": ["splice($1);", "$0"],
        "description": "The splice() method changes the contents of an array by removing or replacing existing elements and/or adding new elements in place. To access part of an array without modifying it, see slice()."
    },
    "toJSON": {
        "prefix": "toJSON",
        "body": ["toJSON();", "$0"],
        "description": "The toJSON() method returns a string representation of the Date object."
    },
    "toDateString": {
        "prefix": "toDateString",
        "body": ["toDateString();", "$0"],
        "description": ""
    },
    "setTime": {
        "prefix": "setTime",
        "body": ["setTime($1);", "$0"],
        "description": "The setTime() method sets the Date object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC."
    },
    "setDate": {
        "prefix": "setDate",
        "body": ["setDate($1);", "$0"],
        "description": "The setDate() method changes the day of the month of a given Date instance, based on local time."
    },
    // jsdoc snippets
    "comment": {
        "prefix": "comment",
        "body": [
            "/**",
            " * ${1:What it does}.",
            " *",
            " * @param ${3:name} - ${4:Parameter description.}",
            " * @returns ${2:Type and description of the returned object.}",
            " *",
            " * @example",
            " * ```",
            " * ${5:Write me later.}$0",
            " * ```",
            " */"
        ],
        "description": [
            "/**",
            " * What it does.",
            " *",
            " * @param  - Parameter description",
            " * @returns Type and description of the returned object.",
            " *",
            " * @example",
            " * ```",
            " * Write me later",
            " * ```",
            " */"
        ]
    },
    "comment simple": {
        "prefix": "scomment",
        "body": ["/**", " * ${1:Comment.}$0", " */"],
        "description": ["/**", " * Comment", " */"]
    },
    "abstract": {
        "prefix": "@abstract",
        "body": ["@abstract$0"],
        "description": "This member must be implemented (or overridden) by the inheritor. Synonysm of @virtual."
    },
    "virtual": {
        "prefix": "@virtual",
        "body": ["@virlual$0"],
        "description": "This member must be implemented (or overridden) by the inheritor. Synonysm of @abstract."
    },
    "access": {
        "prefix": "@access",
        "body": ["@access ${1:private}$0"],
        "description": "Specify the access level of this member (private, package-private, public, or protected)."
    },
    "alias": {
        "prefix": "@alias",
        "body": ["@alias ${1:name}$0"],
        "description": "Treat a member as if it had a different name."
    },
    "async": {
        "prefix": "@async",
        "body": ["@async$0"],
        "description": "Indicate that the function is asynchronous."
    },
    "augments": {
        "prefix": "@augments",
        "body": ["@augments ${1:namepath}$0"],
        "description": "The @augments or @extends tag indicates that a symbol inherits from, and potentially adds to, a parent symbol. You can use this tag to document both class-based and prototype-based inheritance. Synonysm of @extends."
    },
    "extends": {
        "prefix": "@extends",
        "body": ["@extends ${1:namepath}$0"],
        "description": "The @augments or @extends tag indicates that a symbol inherits from, and potentially adds to, a parent symbol. You can use this tag to document both class-based and prototype-based inheritance. Synonysm of @augments."
    },
    "author": {
        "prefix": "@author",
        "body": ["@author ${1:author_name} <${2:author_email}$0>"],
        "description": "Identify the author of an item."
    },
    "borrows": {
        "prefix": "@borrows",
        "body": ["@borrows ${1:that namepath} as ${2:this namepath}$0"],
        "description": "The @borrows tag allows you to add documentation for another symbol to your documentation. This tag would be useful if you had more than one way to reference a function, but you didn't want to duplicate the same documentation in two places."
    },
    "callback": {
        "prefix": "@callback",
        "body": ["@callback ${1:namepath}$0"],
        "description": "The @callback tag provides information about a callback function that can be passed to other functions, including the callback's parameters and return value. You can include any of the tags that you can provide for a @method."
    },
    "class_": {
        "prefix": "@class",
        "body": ["@class$0"],
        "description": "This function is intended to be called with the \"new\" keyword. Synonysm of @constructor."
    },
    "constructor_": {
        "prefix": "@constructor",
        "body": ["@constructor$0"],
        "description": "This function is intended to be called with the \"new\" keyword. Synonysm of @class."
    },
    "classdesc": {
        "prefix": "@classdesc",
        "body": ["@classdesc ${1:some description}$0"],
        "description": "Use the following text to describe the entire class."
    },
    "constant": {
        "prefix": "@constant",
        "body": ["@constant$0"],
        "description": "Document an object as a constant. Synonysm of @const."
    },
    "constructs": {
        "prefix": "@constructs",
        "body": ["@constructs$0"],
        "description": "This function member will be the constructor for the previous class."
    },
    "copyright": {
        "prefix": "@copyright",
        "body": ["@copyright ${1:some copyright text}$0"],
        "description": "Document some copyright information."
    },
    "default": {
        "prefix": "@default",
        "body": ["@default$0"],
        "description": "The @default tag allows you to document the assigned value of a symbol. You can supply this tag with a value yourself or you can allow JSDoc to automatically document the value from the source code -- only possible when the documented symbol is being assigned a single, simple value that is either: a string, a number, a boolean or null. Synonysm of @defaultvalue."
    },
    "defaultvalue": {
        "prefix": "@defaultvalue",
        "body": ["@defaultvalue$0"],
        "description": "The @default tag allows you to document the assigned value of a symbol. You can supply this tag with a value yourself or you can allow JSDoc to automatically document the value from the source code -- only possible when the documented symbol is being assigned a single, simple value that is either: a string, a number, a boolean or null. Synonysm of @default."
    },
    "deprecated": {
        "prefix": "@deprecated",
        "body": ["@deprecated$0"],
        "description": "Document that this is no longer the preferred way."
    },
    "description": {
        "prefix": "@description",
        "body": ["@description ${1:some description}$0"],
        "description": "The @description tag allows you to provide a general description of the symbol you are documenting. The description may include HTML markup. It may also include Markdown formatting if the Markdown plugin is enabled. Synonysm of @desc."
    },
    "desc": {
        "prefix": "@desc",
        "body": ["@desc ${1:some description}$0"],
        "description": "The @description tag allows you to provide a general description of the symbol you are documenting. The description may include HTML markup. It may also include Markdown formatting if the Markdown plugin is enabled. Synonysm of @description."
    },
    "enum": {
        "prefix": "@enum",
        "body": ["@enum ${1:type}$0"],
        "description": "The @enum tag documents a collection of static properties whose values are all of the same type."
    },
    "event": {
        "prefix": "@event",
        "body": ["@event ${1:class name}#[event]:${2:eventName}$0"],
        "description": "Provide an example of how to use a documented item. The text that follows this tag will be displayed as highlighted code."
    },
    "example": {
        "prefix": "@example",
        "body": ["@example ${1:some example}$0"],
        "description": "The @event tag allows you to document an event that can be fired. A typical event is represented by an object with a defined set of properties."
    },
    "exports": {
        "prefix": "@exports",
        "body": ["@exports ${1:moduleName}$0"],
        "description": "Use the @exports tag when documenting JavaScript modules that export anything other than the \"exports\" object or the \"module.exports\" property."
    },
    "external": {
        "prefix": "@external",
        "body": ["@external ${1:nameOfExternal}$0"],
        "description": "The @external tag identifies a class, namespace, or module that is defined outside of the current package. Synonysm of @host."
    },
    "host": {
        "prefix": "@host",
        "body": ["@host ${1:nameOfExternal}$0"],
        "description": "The @external tag identifies a class, namespace, or module that is defined outside of the current package. Synonysm of @external."
    },
    "file": {
        "prefix": "@file",
        "body": ["@file ${1:some description}$0"],
        "description": "The @file tag provides a description for a file. Use the tag in a JSDoc comment at the beginning of the file. Synonysm of @fileoverview and @overview."
    },
    "fileoverview": {
        "prefix": "@fileoverview",
        "body": ["@fileoverview ${1:some description}$0"],
        "description": "The @file tag provides a description for a file. Use the tag in a JSDoc comment at the beginning of the file. Synonysm of @file and @overview."
    },
    "overview": {
        "prefix": "@overview",
        "body": ["@overview ${1:some description}$0"],
        "description": "The @file tag provides a description for a file. Use the tag in a JSDoc comment at the beginning of the file. Synonysm of @file and @fileoverview"
    },
    "fires": {
        "prefix": "@fires",
        "body": ["@fires ${1:className}#[event:]${2:eventName}$0"],
        "description": "Describe the events this method may fire. Synonysm of @emits."
    },
    "emits": {
        "prefix": "@emits",
        "body": ["@emits ${1:className}#[event:]${2:eventName}$0"],
        "description": "Describe the events this method may fire. Synonysm of @fires."
    },
    "function": {
        "prefix": "@function",
        "body": ["@function$0"],
        "description": "This marks an object as being a function, even though it may not appear to be one to the parser. Synonysm of @func and @method."
    },
    "func": {
        "prefix": "@func",
        "body": ["@func$0"],
        "description": "This marks an object as being a function, even though it may not appear to be one to the parser. Synonysm of @function and @method."
    },
    "method_": {
        "prefix": "@method",
        "body": ["@method$0"],
        "description": "This marks an object as being a function, even though it may not appear to be one to the parser. Synonysm of @function and @func."
    },
    "generator": {
        "prefix": "@generator",
        "body": ["@generator$0"],
        "description": "Indicate that a function is a generator function."
    },
    "global": {
        "prefix": "@global",
        "body": ["@global$0"],
        "description": "Document a global object."
    },
    "hideconstructor": {
        "prefix": "@hideconstructor",
        "body": ["@hideconstructor$0"],
        "description": "Indicate that the constructor should not be displayed."
    },
    "ignore": {
        "prefix": "@ignore",
        "body": ["@ignore$0"],
        "description": "Omit a symbol from the documentation."
    },
    "implements": {
        "prefix": "@implements",
        "body": ["@implements$0"],
        "description": "This symbol implements an interface."
    },
    "inheritdoc": {
        "prefix": "@inheritdoc",
        "body": ["@inheritdoc$0"],
        "description": "Indicate that a symbol should inherit its parent's documentation."
    },
    "inner": {
        "prefix": "@inner",
        "body": ["@inner$0"],
        "description": "Using the @inner tag will mark a symbol as an inner member of its parent symbol. This means it can be referred to by \"Parent~Child\"."
    },
    "instance": {
        "prefix": "@instance",
        "body": ["@instance$0"],
        "description": "Using the @instance tag will mark a symbol as an instance member of its parent symbol. This means it can be referred to by \"Parent#Child\"."
    },
    "interface": {
        "prefix": "@interface",
        "body": ["@interface$0"],
        "description": "This symbol is an interface that others can implement."
    },
    "kind": {
        "prefix": "@kind",
        "body": ["@kind ${1:kindName}$0"],
        "description": "What kind of symbol is this. Possible values are: class, constant, event, external, file, function, member, mixin, module, namespace, typedef."
    },
    "lends": {
        "prefix": "@lends",
        "body": ["@lends ${1:namePath}$0"],
        "description": "The @lends tag allows you to document all the members of an object literal as if they were members of a symbol with the given name. You might want to do this if you are passing an object literal into a function that creates a named class from its members."
    },
    "license": {
        "prefix": "@license",
        "body": ["@license ${1:identifier}$0"],
        "description": "Identify the license that applies to this code."
    },
    "listens": {
        "prefix": "@listens",
        "body": ["@listens ${1:eventName}$0"],
        "description": "List the events that a symbol listens for."
    },
    "member": {
        "prefix": "@member",
        "body": ["@member {type}$0"],
        "description": "Document a member. Synonysm or @var."
    },
    "var": {
        "prefix": "@var",
        "body": ["@var {type}$0"],
        "description": "Document a member. Synonysm or @member."
    },
    "memberof": {
        "prefix": "@memberof",
        "body": ["@memberof ${1:parentNamePath}$0"],
        "description": "This symbol belongs to a parent symbol."
    },
    "mixes": {
        "prefix": "@mixes",
        "body": ["@mixes ${1:OtherObjectPath}$0"],
        "description": "This object mixes in all the members from another object."
    },
    "mixin": {
        "prefix": "@mixin",
        "body": ["@mixin ${1:MixinName}$0"],
        "description": "Document a mixin object."
    },
    "module": {
        "prefix": "@module",
        "body": ["@module ${1:myModule}$0"],
        "description": "Document a JavaScript module."
    },
    "name": {
        "prefix": "@name",
        "body": ["@name ${1:namePath}$0"],
        "description": "The @name tag forces JSDoc to associate the remainder of the JSDoc comment with the given name, ignoring all surrounding code. This tag is best used in \"virtual comments\" for symbols that are not readily visible in the code, such as methods that are generated at runtime."
    },
    "namespace": {
        "prefix": "@namespace",
        "body": ["@namespace ${1:someName}$0"],
        "description": "The @namespace tag indicates that an object creates a namespace for its members. You can also write a virtual JSDoc comment that defines a namespace used by your code."
    },
    "override": {
        "prefix": "@override",
        "body": ["@override$0"],
        "description": "The @override tag indicates that a symbol overrides a symbol with the same name in a parent class."
    },
    "package": {
        "prefix": "@package",
        "body": ["@package$0"],
        "description": "The @package tag marks a symbol as package-private. Typically, this tag indicates that a symbol is available only to code in the same directory as the source file for this symbol."
    },
    "param": {
        "prefix": "@param",
        "body": ["@param {${1:type}} ${2:paranName} - ${3:paramDescription}$0"],
        "description": "Provides the name, type, and description of a function parameter. Synonysm of @arg and @argument."
    },
    "arg": {
        "prefix": "@arg",
        "body": ["@arg {${1:type}} ${2:paranName} - ${3:paramDescription}$0"],
        "description": "Provides the name, type, and description of a function parameter. Synonysm of @param and @argument."
    },
    "argument": {
        "prefix": "@argument",
        "body": [
            "@argument {${1:type}} ${2:paranName} - ${3:paramDescription}$0"
        ],
        "description": "Provides the name, type, and description of a function parameter. Synonysm of @param and @arg."
    },
    "private": {
        "prefix": "@private",
        "body": ["@private$0"],
        "description": "Indicate this symbol is meant to be private."
    },
    "property": {
        "prefix": "@property",
        "body": [
            "@property {${1:type}} ${2:propertyName.something} - ${3:propertyDescription}$0"
        ],
        "description": "The @property tag is a way to easily document a list of static properties of a class, namespace or other object."
    },
    "protected": {
        "prefix": "@protected",
        "body": ["@protected$0"],
        "description": "The @protected tag marks a symbol as protected. Typically, this tag indicates that a symbol is only available, or should only be used, within the current module."
    },
    "public": {
        "prefix": "@publilc",
        "body": ["@public$0"],
        "description": "Indicated this symbol is meant to be public."
    },
    "readonly": {
        "prefix": "@readonly",
        "body": ["@readonly$0"],
        "description": "Indicates this symbol is meant to be read-only."
    },
    "requires": {
        "prefix": "@requires",
        "body": ["@requires ${1:moduleName}$0"],
        "description": "Indicates a required module."
    },
    "returns": {
        "prefix": "@returns",
        "body": ["@returns ${1:type} ${2:description}$0"],
        "description": "Documents the value a function returns. Synonysm of @return."
    },
    "returnd": {
        "prefix": "@return",
        "body": ["@return ${1:type} ${2:description}$0"],
        "description": "Documents the value a function returns. Synonysm of @returns."
    },
    "see": {
        "prefix": "@see",
        "body": ["@see ${1:text}$0"],
        "description": "Refer to some other documentation for more information. It accepts text or {@link foobar}."
    },
    "since": {
        "prefix": "@since",
        "body": ["@since ${1:version}$0"],
        "description": "Version in which this symbol was added."
    },
    "static": {
        "prefix": "@static",
        "body": ["@static$0"],
        "description": "Indicates this is an static member."
    },
    "summary": {
        "prefix": "@summary",
        "body": ["@summary ${1:summary goes here}$0"],
        "description": "A shorter version of the full description."
    },
    "this_": {
        "prefix": "@this",
        "body": ["@this ${1:namePath}$0"],
        "description": "The @this tag indicates what the this keyword refers to when used within another symbol."
    },
    "throws": {
        "prefix": "@throws",
        "body": ["@throws ${1:errorName} ${2:description}$0"],
        "description": "Describe what errors can be thrown. Synonysm of @exception."
    },
    "exception": {
        "prefix": "@exception",
        "body": ["@exception ${1:errorName} ${2:description}$0"],
        "description": "Describe what errors can be thrown. Synonysm of @throws."
    },
    "todo": {
        "prefix": "@todo",
        "body": ["@todo ${1:text describing thing to do}$0"],
        "description": "Documents a task to be completed."
    },
    "tutorial": {
        "prefix": "@tutorial",
        "body": ["@tutorial$0"],
        "description": "Link to a tutorial file."
    },
    "type": {
        "prefix": "@type",
        "body": ["@type ${1:typeName}$0"],
        "description": "Documents the type of the object."
    },
    "typedef": {
        "prefix": "@typedef",
        "body": ["@typedef ${1:type} ${2:namePath}$0"],
        "description": "Documents a custom type definition."
    },
    "variation": {
        "prefix": "@variation",
        "body": ["@variation ${1:variationNumber}$0"],
        "description": "Distinguish different objects with the same name."
    },
    "version": {
        "prefix": "@version",
        "body": ["@version ${1:versionTag}$0"],
        "description": "Documents the version number of an item."
    },
    "yields": {
        "prefix": "@yields",
        "body": ["@yields {${1:type}} ${2:description}$0"],
        "description": "Document the value yielded by a generator function."
    },
    "link": {
        "prefix": "@link",
        "body": ["@link ${1:namePathOrUrl}$0"],
        "description": "Link to another item in the documentation. Synonysm of @linkcode and @linkplain."
    },
    "linkcode": {
        "prefix": "@linkcode",
        "body": ["@linkcode ${1:namePathOrUrl}$0"],
        "description": "Link to another item in the documentation. Synonysm of @link and @linkplain."
    },
    "linkplain": {
        "prefix": "@linkplain",
        "body": ["@linkplain ${1:namePathOrUrl}$0"],
        "description": "Link to another item in the documentation. Synonysm of @link and @linkcode."
    }
}
